package com.example.tgbot.service;

import com.example.tgbot.config.BotConfig;
import com.example.tgbot.Bank;
import com.vdurmont.emoji.EmojiParser;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;

@Component
public class TelegramBot extends TelegramLongPollingBot {
    final BotConfig config;
    static final String HELP_TEXT = """
            This bot is created to demonstrate Spring bot.\s

            You can execute commands from the main menu ont the left or by typing a command:\s

            Type /start.
            You will se a welcome message.""";
    static final String SETTINGS_TEXT = "–ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∏–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, —è–∫—ñ –¥–ª—è –≤–∞—Å –ø–æ—Ç—Ä—ñ–±–Ω—ñ.";
    static final String START_TEXT = """
            –¶–µ–π –±–æ—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑–∞ –≤–∞–ª—é—Ç–æ–π.\s
                        
            –í–∏ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏ –±–∞–Ω–∫, –≤–∞–ª—é—Ç—É —Ç–∞ –∑—Ä—É—á–Ω–∏–π –¥–ª—è —á–∞—Å, –∫–æ–ª–∏ –º–∏ –í–∞—Å –±—É–¥–µ–º–æ —Å–ø–æ–≤—ñ—â–∞—Ç–∏ –ø—Ä–æ —Ç–µ–ø–µ—Ä—ñ—à–Ω—ñ–π –∫—É—Ä—Å –≤–∞–ª—é—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å. \s
                        
            –î–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –º–∏ —É–∂–µ –æ–±—Ä–∞–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø–∞—Ä–µ–º–µ—Ç—Ä–∏, —Ç–æ–º—É –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –Ω–∞–∂–∞—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.""";

    static final String STEP_BACK_TEXT = """
            –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–∞–∂–º—ñ—Ç—å - "–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∞–ª—é—Ç—É". \s
            –î–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—é—Ç–∏, –±–∞–Ω–∫—É —Ç–∞ —á–∞—Å—É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è - "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è". \s
            –Ø–∫—â–æ –í–∞–º —â–æ—Å—å –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞ - "–î–æ–ø–æ–º–æ–≥–∞".""";
    static boolean privatBank= false;
    static boolean monoBank = true;
    static boolean nBy = false;

    static boolean twoAfterPoint = true;
    static boolean threeAfterPoint = false;
    static boolean fourAfterPoint = false;

    static boolean usdChoice = true;
    static boolean eurChoice = false;
    static boolean usdANDeur = false;

    static String getValSell = "";
    static String getValBuy = "";

    static String doneInfoSell = "";
    static String doneInfoBuy = "";

    static String alltext = "";

    public TelegramBot(BotConfig config){
        this.config = config;
        List<BotCommand> listOfCommands = new ArrayList<>();
        listOfCommands.add(new BotCommand("/start", "get a welcome message"));
        listOfCommands.add(new BotCommand("/help","info how to use this bot"));
        listOfCommands.add(new BotCommand("/settings","set your preferences"));
        try {
            this.execute(new SetMyCommands(listOfCommands, new BotCommandScopeDefault(), null));
        }catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }
    @Override
    public String getBotUsername() {
        return config.getBotName();
    }
    @Override
    public String getBotToken(){
        return config.getToken();
    }
    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()){
            String massageTest = update.getMessage().getText();

            long chatId = update.getMessage().getChatId();

            switch (massageTest){
                case "/start":
                    startCommandReceived(chatId, update.getMessage().getChat().getFirstName());
                    startMenu(chatId, START_TEXT);
                    break;

                case "/help", "–î–æ–ø–æ–º–æ–≥–∞":
                    sendMessage(chatId, HELP_TEXT);
                    break;

                case "/settings", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è":
                    settingsMenu(chatId, SETTINGS_TEXT);
                    break;



                case "–ù–∞–∑–∞–¥":
                    startMenu(chatId, STEP_BACK_TEXT);
                    break;
                case "–ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å":
                    settingsMenu(chatId, "üßê");
                    break;

                case "–ë–∞–Ω–∫":
                    if (monoBank) bankChoiceMono(chatId, "–û–±—Ä–∞–Ω–æ MonoBank.");
                    if (privatBank) bankChoicePrivat(chatId, "–û–±—Ä–∞–Ω–æ PrivatBank.");
                    if (nBy)bankChoiceNBU(chatId, "–û–±—Ä–∞–Ω–æ PrivatBank");
                    break;
                case "MonoBank":
                    bankChoiceMono(chatId, "–û–±—Ä–∞–Ω–æ MonoBank.");
                    break;
                case "PrivatBank":
                    bankChoicePrivat(chatId, "–û–±—Ä–∞–Ω–æ PrivatBank.");
                    break;
                case "NBU":
                    bankChoiceNBU(chatId, "–û–±—Ä–∞–Ω–æ NBU.");
                    break;
                case "MonoBank‚úÖ":
                    bankChoicePrivat(chatId, "–û–±—Ä–∞–Ω–æ PrivatBank.");
                    break;
                case "PrivatBank‚úÖ":
                    bankChoiceMono(chatId, "–û–±—Ä–∞–Ω–æ MonoBank.");
                    break;
                case "NBU‚úÖ":
                    bankChoiceMono(chatId, "–û–±—Ä–∞–Ω–æ MonoBank.");
                    break;

                case "–í–∞–ª—é—Ç–∞":
                    if (usdChoice) currencySelectionUSD(chatId, "–û–±—Ä–∞–Ω–æ USD.");
                    if (eurChoice) currencySelectionEUR(chatId, "–û–±—Ä–∞–Ω–æ USD —ñ EUR.");
                    if (usdANDeur) currencySelectionUSDandEUR(chatId,"–û–±—Ä–∞–Ω–æ USD —ñ EUR.");
                    break;
                case "EUR":
                    currencySelectionUSDandEUR(chatId, "–û–±—Ä–∞–Ω–æ USD —ñ EUR.");
                    break;
                case "USD":
                    currencySelectionUSDandEUR(chatId, "–û–±—Ä–∞–Ω–æ USD —ñ EUR.");
                    break;
                case "USD‚úÖ":
                    currencySelectionEUR(chatId,"–û–±—Ä–∞–Ω–æ EUR." );
                    break;
                case "EUR‚úÖ":
                    currencySelectionUSD(chatId,"–û–±—Ä–∞–Ω–æ USD.");
                    break;
                    case "–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∞–ª—é—Ç—É":
                        informationMessage(chatId, "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–∏–±—ñ—Ä:");
                        getInformationAboutCurrency(chatId, "–ö—É—Ä—Å –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç:");
                        break;

                case "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏":
                    if (twoAfterPoint)twoNumberAfterPoint(chatId, "–û–±—Ä–∞–Ω–æ 2 —á–∏—Å–ª–∞ –ø—ñ—Å–ª—è –∫–æ–º–∏.");
                    if (threeAfterPoint)threeNumberAfterPoint(chatId, "–û–±—Ä–∞–Ω–æ 3 —á–∏—Å–ª–∞ –ø—ñ—Å–ª—è –∫–æ–º–∏.");
                    if (fourAfterPoint)fourNumberAfterPoint(chatId, "–û–±—Ä–∞–Ω–æ 4 —á–∏—Å–ª–∞ –ø—ñ—Å–ª—è –∫–æ–º–∏.");
                    break;
                case "2":
                    twoNumberAfterPoint(chatId, "–û–±—Ä–∞–Ω–æ 2 —á–∏—Å–ª–∞ –ø—ñ—Å–ª—è –∫–æ–º–∏.");
                    break;
                case "3":
                    threeNumberAfterPoint(chatId, "–û–±—Ä–∞–Ω–æ 3 —á–∏—Å–ª–∞ –ø—ñ—Å–ª—è –∫–æ–º–∏.");
                    break;
                case "4":
                    fourNumberAfterPoint(chatId, "–û–±—Ä–∞–Ω–æ 4 —á–∏—Å–ª–∞ –ø—ñ—Å–ª—è –∫–æ–º–∏.");
                    break;

                case "–ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è":
                    notificationTimer(chatId, "–í–∏–±–µ—Ä—ñ—Ç—å —á–∞—Å –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å.");
                    break;

                default: sendMessage(chatId, "sorry command was not recognised");
            }
        }
    }
    private void startCommandReceived(long chatId, String name){
        String answer = EmojiParser.parseToUnicode("Hi, " + name + ", nice to meet you!" + "\uD83E\uDEF6\uD83C\uDFFB") ;
        sendMessage(chatId, answer);
    }
    private void sendMessage(long chatId,String textToSend){
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        try {
            execute(message);
        }catch (TelegramApiException ignored){
        }
    }

    private void startMenu(long chatId, String textToSend){
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();
        row.add("–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∞–ª—é—Ç—É");
        keyboardRows.add(row);
        row = new KeyboardRow();
        row.add("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è");
        row.add("–î–æ–ø–æ–º–æ–≥–∞");
        keyboardRows.add(row);
        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        }catch (TelegramApiException ignored){
        }
    }
    private void getInformationAboutCurrency(long chatId, String textToSend){
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));

        Bank bank = new Bank();


        if (monoBank && usdChoice && twoAfterPoint){
            getValSell = bank.getRate("usd", "mono", "sell");
            doneInfoSell = getValSell.substring(0, getValSell.length() - 2);

            getValBuy = bank.getRate("usd", "mono", "buy");
            doneInfoBuy = getValBuy;

            alltext = "\n\n–ü—Ä–æ–¥–∞–∂: " + doneInfoSell + "\n–ö—É–ø—ñ–≤–ª—è: " + doneInfoBuy;

        }else if (monoBank && usdChoice && threeAfterPoint){
            getValSell = bank.getRate("usd", "mono", "sell");
            doneInfoSell = getValSell.substring(0, getValSell.length() - 1);

            getValBuy = bank.getRate("usd", "mono", "buy");
            doneInfoBuy = getValBuy;

            alltext = "\n\n–ü—Ä–æ–¥–∞–∂: " + doneInfoSell + "\n–ö—É–ø—ñ–≤–ª—è: " + doneInfoBuy;


        }else if (monoBank && usdChoice && fourAfterPoint){
            getValSell = bank.getRate("usd", "mono", "sell");
            doneInfoSell = getValSell;

            getValBuy = bank.getRate("usd", "mono", "buy");
            doneInfoBuy = getValBuy;

            alltext = "\n\n–ü—Ä–æ–¥–∞–∂: " + doneInfoSell + "\n–ö—É–ø—ñ–≤–ª—è: " + doneInfoBuy;

        }else if (monoBank && eurChoice && twoAfterPoint){
            getValSell = bank.getRate("eur", "mono", "sell");
            doneInfoSell = getValSell.substring(0, getValSell.length() - 2);

            getValBuy = bank.getRate("eur", "mono", "buy");
            doneInfoBuy = getValBuy;

            alltext = "\n\n–ü—Ä–æ–¥–∞–∂: " + doneInfoSell + "\n–ö—É–ø—ñ–≤–ª—è: " + doneInfoBuy;

        }else if (monoBank && eurChoice && threeAfterPoint){
            getValSell = bank.getRate("eur", "mono", "sell");
            doneInfoSell = getValSell.substring(0, getValSell.length() - 1);

            getValBuy = bank.getRate("eur", "mono", "buy");
            doneInfoBuy = getValBuy;

            alltext = "\n\n–ü—Ä–æ–¥–∞–∂: " + doneInfoSell + "\n–ö—É–ø—ñ–≤–ª—è: " + doneInfoBuy;

        }else if (monoBank && eurChoice && fourAfterPoint){
            getValSell = bank.getRate("eur", "mono", "sell");
            doneInfoSell = getValSell;

            getValBuy = bank.getRate("eur", "mono", "buy");
            doneInfoBuy = getValBuy;

            alltext = "\n\n–ü—Ä–æ–¥–∞–∂: " + doneInfoSell + "\n–ö—É–ø—ñ–≤–ª—è: " + doneInfoBuy;

        }else if (nBy && usdChoice && twoAfterPoint){

            getValBuy = bank.getRate("usd", "nby", "buy");
            doneInfoBuy = getValBuy.substring(0, getValBuy.length() - 2);

            alltext = "\n\n–ö—É–ø—ñ–≤–ª—è: " + doneInfoBuy;

        }else if (nBy && usdChoice && threeAfterPoint){

            getValBuy = bank.getRate("usd", "nby", "buy");
            doneInfoBuy = getValBuy.substring(0, getValBuy.length() - 1);

            alltext = "\n\n–ö—É–ø—ñ–≤–ª—è: " + doneInfoBuy;

        }else if (nBy && usdChoice && fourAfterPoint){

            getValBuy = bank.getRate("usd", "nby", "buy");
            doneInfoBuy = getValBuy;

            alltext = "\n\n–ö—É–ø—ñ–≤–ª—è: " + doneInfoBuy;

        }else if (nBy && eurChoice && twoAfterPoint){

            getValBuy = bank.getRate("eur", "nby", "buy");
            doneInfoBuy = getValBuy.substring(0, getValBuy.length() - 2);

            alltext = "\n\n–ü—Ä–æ–¥–∞–∂: " + doneInfoSell + "\n–ö—É–ø—ñ–≤–ª—è: " + doneInfoBuy;

        }else if (nBy && eurChoice && threeAfterPoint){

            getValBuy = bank.getRate("eur", "nby", "buy");
            doneInfoBuy = getValBuy.substring(0, getValBuy.length() - 1);

            alltext = "\n\n–ö—É–ø—ñ–≤–ª—è: " + doneInfoBuy;

        }else if (nBy && eurChoice && fourAfterPoint){

            getValBuy = bank.getRate("eur", "nby", "buy");
            doneInfoBuy = getValBuy;

            alltext = "\n\n–ö—É–ø—ñ–≤–ª—è: " + doneInfoBuy;

        }else if (privatBank && usdChoice && twoAfterPoint){
            getValSell = bank.getRate("usd", "privat", "sell");
            doneInfoSell = getValSell.substring(0, getValSell.length() - 3);

            getValBuy = bank.getRate("usd", "privat", "buy");
            doneInfoBuy = getValBuy.substring(0, getValBuy.length() - 3);

            alltext = "\n\n–ü—Ä–æ–¥–∞–∂: " + doneInfoSell + "\n–ö—É–ø—ñ–≤–ª—è: " + doneInfoBuy;

        }else if (privatBank && usdChoice && threeAfterPoint){
            getValSell = bank.getRate("usd", "privat", "sell");
            doneInfoSell = getValSell.substring(0, getValSell.length() - 2);

            getValBuy = bank.getRate("usd", "privat", "buy");
            doneInfoBuy = getValBuy.substring(0, getValBuy.length() - 2);

            alltext = "\n\n–ü—Ä–æ–¥–∞–∂: " + doneInfoSell + "\n–ö—É–ø—ñ–≤–ª—è: " + doneInfoBuy;

        }else if (privatBank && usdChoice && fourAfterPoint){
            getValSell = bank.getRate("usd", "privat", "sell");
            doneInfoSell = getValSell.substring(0, getValSell.length() - 1);

            getValBuy = bank.getRate("usd", "privat", "buy");
            doneInfoBuy = getValBuy.substring(0, getValBuy.length() - 1);

            alltext = "\n\n–ü—Ä–æ–¥–∞–∂: " + doneInfoSell + "\n–ö—É–ø—ñ–≤–ª—è: " + doneInfoBuy;

        }else if (privatBank && eurChoice && twoAfterPoint){
            getValSell = bank.getRate("eur", "privat", "sell");
            doneInfoSell = getValSell.substring(0, getValSell.length() - 3);

            getValBuy = bank.getRate("eur", "privat", "buy");
            doneInfoBuy = getValBuy.substring(0, getValBuy.length() - 3);

            alltext = "\n\n–ü—Ä–æ–¥–∞–∂: " + doneInfoSell + "\n–ö—É–ø—ñ–≤–ª—è: " + doneInfoBuy;

        }else if (privatBank && eurChoice && threeAfterPoint){
            getValSell = bank.getRate("eur", "privat", "sell");
            doneInfoSell = getValSell.substring(0, getValSell.length() - 2);

            getValBuy = bank.getRate("eur", "privat", "buy");
            doneInfoBuy = getValBuy.substring(0, getValBuy.length() - 2);

            alltext = "\n\n–ü—Ä–æ–¥–∞–∂: " + doneInfoSell + "\n–ö—É–ø—ñ–≤–ª—è: " + doneInfoBuy;

        }else if (privatBank && eurChoice && fourAfterPoint){
            getValSell = bank.getRate("eur", "privat", "sell");
            doneInfoSell = getValSell.substring(0, getValSell.length() - 1);

            getValBuy = bank.getRate("eur", "privat", "buy");
            doneInfoBuy = getValBuy.substring(0, getValBuy.length() - 1);

            alltext = "\n\n–ü—Ä–æ–¥–∞–∂: " + doneInfoSell + "\n–ö—É–ø—ñ–≤–ª—è: " + doneInfoBuy;

        }else sendMessage(chatId, textToSend + "\n\n–°–∫–æ—Ä–æ –≤–∏–ø—Ä–∞–≤–∏–º–æ. ‚ù§");

        sendMessage(chatId, textToSend + alltext);

        try {
            execute(message);
        }catch (TelegramApiException ignored){
        }
    }
    private void informationMessage(long chatId, String textToSend){
        String bank = "";
        String currency = "";
        String num = "";

        if (monoBank){
            bank += "MonoBank";
        }else if (privatBank){
            bank += "PrivatBank";
        }else
            bank += "NBU";

        if (usdChoice){
            currency += "USD";
        }else if (eurChoice){
            currency += "EUR";
        }else
            currency += "USD —ñ EUR";

        if (twoAfterPoint){
            num += "2";
        }else if (threeAfterPoint){
            num += "3";
        }else
            num += "4";

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend + "\n\n–ë–∞–Ω–∫: " + bank + "\n–í–∞–ª—é—Ç–∞: " + currency + "\n–ö-—Å—Ç—å –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏: " + num);

        try {
            execute(message);
        }catch (TelegramApiException ignored){
        }
    }

    private void settingsMenu(long chatId, String textToSend){
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏");
        row.add("–ë–∞–Ω–∫");
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–í–∞–ª—é—Ç–∞");
        row.add("–ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è");
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–ù–∞–∑–∞–¥");
        keyboardRows.add(row);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        }catch (TelegramApiException ignored){
        }
    }
    private void currencySelectionUSD(long chatId, String textToSend){
        usdChoice = true;
        eurChoice = false;
        usdANDeur = false;
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("USD‚úÖ");
        row.add("EUR");
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å");

        keyboardRows.add(row);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException ignored) {
        }
    }
    private void currencySelectionEUR(long chatId, String textToSend){
        usdChoice = false;
        eurChoice = true;
        usdANDeur = false;
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("USD");
        row.add("EUR‚úÖ");
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å");

        keyboardRows.add(row);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException ignored) {
        }
    }private void currencySelectionUSDandEUR(long chatId, String textToSend){
        usdChoice = false;
        eurChoice = false;
        usdANDeur = true;
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("USD‚úÖ");
        row.add("EUR‚úÖ");
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å");

        keyboardRows.add(row);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException ignored) {
        }
    }

    private void bankChoiceMono(long chatId, String textToSend){
        monoBank = true;
        privatBank = false;
        nBy = false;
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("MonoBank‚úÖ");
        row.add("PrivatBank");
        row.add("NBU");
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å");

        keyboardRows.add(row);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        }catch (TelegramApiException ignored){
        }
    }
    private void bankChoicePrivat(long chatId, String textToSend){
        privatBank = true;
        monoBank = false;
        nBy = false;
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("MonoBank");
        row.add("PrivatBank‚úÖ");
        row.add("NBU");
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å");

        keyboardRows.add(row);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        }catch (TelegramApiException ignored){
        }
    }
    private void bankChoiceNBU(long chatId, String textToSend){
        nBy = true;
        privatBank = false;
        monoBank = false;

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("MonoBank");
        row.add("PrivatBank");
        row.add("NBU‚úÖ");
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å");

        keyboardRows.add(row);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        }catch (TelegramApiException ignored){
        }
    }
    private void twoNumberAfterPoint(long chatId, String textToSend){
        threeAfterPoint = false;
        fourAfterPoint = false;
        twoAfterPoint = true;


        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("2‚úÖ");
        row.add("3");
        row.add("4");
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å");

        keyboardRows.add(row);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        }catch (TelegramApiException ignored){
        }
    }
    private void threeNumberAfterPoint(long chatId, String textToSend){
        twoAfterPoint = false;
        threeAfterPoint = true;
        fourAfterPoint = false;
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("2");
        row.add("3‚úÖ");
        row.add("4");
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å");

        keyboardRows.add(row);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        }catch (TelegramApiException ignored){
        }
    }
    private void fourNumberAfterPoint(long chatId, String textToSend){
        twoAfterPoint = false;
        threeAfterPoint = false;
        fourAfterPoint = true;
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("2");
        row.add("3");
        row.add("4‚úÖ");
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å");

        keyboardRows.add(row);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        }catch (TelegramApiException ignored){
        }
    }

    private void notificationTimer(long chatId, String textToSend){
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("9");
        row.add("10");
        row.add("11");
        row.add("12");
        row.add("13");
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("14");
        row.add("15");
        row.add("16");
        row.add("17");
        row.add("18");
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–í–∏–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è‚úÖ");
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å");
        keyboardRows.add(row);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        }catch (TelegramApiException ignored){
        }
    }

}