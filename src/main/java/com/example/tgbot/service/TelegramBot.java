package com.example.tgbot.service;

import com.example.tgbot.Timer;
import com.example.tgbot.config.BotConfig;
import com.example.tgbot.Bank;
import com.vdurmont.emoji.EmojiParser;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.*;


@Component
public class TelegramBot extends TelegramLongPollingBot {
    final BotConfig config;
    public TelegramBot(BotConfig config) {
        this.config = config;
        List<BotCommand> listOfCommands = new ArrayList<>();
        listOfCommands.add(new BotCommand("/start", "get a welcome message"));
        listOfCommands.add(new BotCommand("/help", "info how to use this bot"));
        listOfCommands.add(new BotCommand("/settings", "set your preferences"));
        try {
            this.execute(new SetMyCommands(listOfCommands, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public String getBotUsername() {
        return config.getBotName();
    }

    @Override
    public String getBotToken() {
        return config.getToken();
    }
    final String HELP_TEXT = """
            This bot is created to demonstrate Spring bot.\s

            You can execute commands from the main menu ont the left or by typing a command:\s

            Type /start.
            You will se a welcome message.""";
    final String SETTINGS_TEXT = "–ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∏–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, —è–∫—ñ –¥–ª—è –≤–∞—Å –ø–æ—Ç—Ä—ñ–±–Ω—ñ.";
    final String START_TEXT = """
            –¶–µ–π –±–æ—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑–∞ –≤–∞–ª—é—Ç–æ–π.\s
                        
            –í–∏ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏ –±–∞–Ω–∫, –≤–∞–ª—é—Ç—É —Ç–∞ –∑—Ä—É—á–Ω–∏–π –¥–ª—è —á–∞—Å, –∫–æ–ª–∏ –º–∏ –í–∞—Å –±—É–¥–µ–º–æ —Å–ø–æ–≤—ñ—â–∞—Ç–∏ –ø—Ä–æ —Ç–µ–ø–µ—Ä—ñ—à–Ω—ñ–π –∫—É—Ä—Å –≤–∞–ª—é—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å. \s
                        
            –î–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –º–∏ —É–∂–µ –æ–±—Ä–∞–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø–∞—Ä–µ–º–µ—Ç—Ä–∏, —Ç–æ–º—É –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –Ω–∞–∂–∞—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.""";

    final String STEP_BACK_TEXT = """
            –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–∞–∂–º—ñ—Ç—å - "–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∞–ª—é—Ç—É". \s
            –î–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—é—Ç–∏, –±–∞–Ω–∫—É —Ç–∞ —á–∞—Å—É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è - "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è". \s
            –Ø–∫—â–æ –í–∞–º —â–æ—Å—å –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞ - "–î–æ–ø–æ–º–æ–≥–∞".""";
    boolean privatBank = false;
    boolean monoBank = true;
    boolean nBy = false;

    boolean twoAfterPoint = true;
    boolean threeAfterPoint = false;
    boolean fourAfterPoint = false;

    boolean usdANDeur = true;
    boolean usdChoice = true;
    boolean eurChoice = true;
    boolean nine = false;
    boolean ten = false;
    boolean eleven = false;
    boolean twelve = false;
    boolean thirteen = false;
    boolean fourteen = false;
    boolean fifteen = false;
    boolean sixteen = false;
    boolean seventeen = false;
    boolean eighteen = false;

    boolean notificationsEnabled = true;

    private Integer notificationHour = null;


    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String massageTest = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            switch (massageTest) {
                case "/start":
                    startCommandReceived(chatId, update.getMessage().getChat().getFirstName());
                    startMenu(chatId, START_TEXT);
                    break;
                case "/help", "–î–æ–ø–æ–º–æ–≥–∞":
                    sendMessage(chatId, HELP_TEXT);
                    break;
                case "/settings", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è":
                    settingsMenu(chatId, SETTINGS_TEXT);
                    break;
                case "–ù–∞–∑–∞–¥":
                    startMenu(chatId, STEP_BACK_TEXT);
                    break;
                case "–ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å":
                    settingsMenu(chatId, "üßê");
                    break;
                case "–ë–∞–Ω–∫":
                    if (monoBank) sendBankChoiceMessage(chatId, "–û–±—Ä–∞–Ω–æ MonoBank.", true, false, false);
                    if (privatBank) sendBankChoiceMessage(chatId, "–û–±—Ä–∞–Ω–æ PrivatBank.", false, true, false);
                    if (nBy) sendBankChoiceMessage(chatId, "–û–±—Ä–∞–Ω–æ PrivatBank", false, false, true);
                    break;
                case "MonoBank":
                    sendBankChoiceMessage(chatId, "–û–±—Ä–∞–Ω–æ MonoBank.", true, false, false);
                    break;
                case "PrivatBank":
                    sendBankChoiceMessage(chatId, "–û–±—Ä–∞–Ω–æ PrivatBank.", false, true, false);
                    break;
                case "NBU":
                    sendBankChoiceMessage(chatId, "–û–±—Ä–∞–Ω–æ NBU.", false, false, true);
                    break;
                case "MonoBank‚úÖ":
                    sendBankChoiceMessage(chatId, "–û–±—Ä–∞–Ω–æ PrivatBank.", false, true, false);
                    break;
                case "PrivatBank‚úÖ":
                    sendBankChoiceMessage(chatId, "–û–±—Ä–∞–Ω–æ MonoBank.", true, false, false);
                    break;
                case "NBU‚úÖ":
                    sendBankChoiceMessage(chatId, "–û–±—Ä–∞–Ω–æ MonoBank.", true, false, false);
                    break;
                case "–í–∞–ª—é—Ç–∞":
                    if (usdANDeur) {
                        sendCurrencySelectionMessage(chatId, "–û–±—Ä–∞–Ω–æ USD —ñ EUR.", true, true, true);
                    }else if (usdChoice) {
                        sendCurrencySelectionMessage(chatId, "–û–±—Ä–∞–Ω–æ USD.", true, false, false);
                    }
                    else sendCurrencySelectionMessage(chatId, "–û–±—Ä–∞–Ω–æ EUR.", false, true, false);

                    break;
                case "EUR":
                    sendCurrencySelectionMessage(chatId, "–û–±—Ä–∞–Ω–æ USD —ñ EUR.", true, true, true);
                    break;
                case "USD":
                    sendCurrencySelectionMessage(chatId, "–û–±—Ä–∞–Ω–æ USD —ñ EUR.", true, true, true);
                    break;
                case "USD‚úÖ":
                    sendCurrencySelectionMessage(chatId, "–û–±—Ä–∞–Ω–æ EUR.", false, true, false);
                    break;
                case "EUR‚úÖ":
                    sendCurrencySelectionMessage(chatId, "–û–±—Ä–∞–Ω–æ USD.", true, false, false);
                    break;
                case "–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∞–ª—é—Ç—É":
                    informationMessage(chatId, "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–∏–±—ñ—Ä:");
                    getInformationAboutCurrency(chatId, "–ö—É—Ä—Å –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç:");
                    break;

                case "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏":
                    if (twoAfterPoint) sendNumberAfterPoint(chatId, "–û–±—Ä–∞–Ω–æ 2 —á–∏—Å–ª–∞ –ø—ñ—Å–ª—è –∫–æ–º–∏.", 2);
                    if (threeAfterPoint) sendNumberAfterPoint(chatId, "–û–±—Ä–∞–Ω–æ 3 —á–∏—Å–ª–∞ –ø—ñ—Å–ª—è –∫–æ–º–∏.", 3);
                    if (fourAfterPoint) sendNumberAfterPoint(chatId, "–û–±—Ä–∞–Ω–æ 4 —á–∏—Å–ª–∞ –ø—ñ—Å–ª—è –∫–æ–º–∏.", 4);
                    break;
                case "2":
                    setNumberAfterPoint(chatId, "–û–±—Ä–∞–Ω–æ 2 —á–∏—Å–ª–∞ –ø—ñ—Å–ª—è –∫–æ–º–∏.", 2);
                    break;
                case "3":
                    setNumberAfterPoint(chatId, "–û–±—Ä–∞–Ω–æ 3 —á–∏—Å–ª–∞ –ø—ñ—Å–ª—è –∫–æ–º–∏.", 3);
                    break;
                case "4":
                    setNumberAfterPoint(chatId, "–û–±—Ä–∞–Ω–æ 4 —á–∏—Å–ª–∞ –ø—ñ—Å–ª—è –∫–æ–º–∏.", 4);
                    break;

                case "–ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è":
                    notificationTimer(chatId, "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", false,false,false,false,
                            false,false,false,false,false,false, true);
                    break;
                case "9":
                    setNotificationHour(chatId, 9);
                    notificationTimer(chatId, "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", true,false,false,false,
                            false,false,false,false,false,false, false);
                    break;
                case "10":
                    setNotificationHour(chatId, 10);
                    notificationTimer(chatId, "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", false,true,false,false,
                            false,false,false,false,false,false, false);
                    break;
                case "11":
                    setNotificationHour(chatId, 11);
                    notificationTimer(chatId, "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", false,false,true,false,
                            false,false,false,false,false,false, false);
                    break;
                case "12":
                    setNotificationHour(chatId, 12);
                    notificationTimer(chatId, "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", false,false,false,true,
                            false,false,false,false,false,false, false);
                    break;
                case "13":
                    setNotificationHour(chatId, 13);
                    notificationTimer(chatId, "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", false,false,false,false,
                            true,false,false,false,false,false, false);
                    break;
                case "14":
                    setNotificationHour(chatId, 14);
                    notificationTimer(chatId, "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", false,false,false,false,
                            false,true,false,false,false,false, false);
                    break;
                case "15":
                    setNotificationHour(chatId, 15);
                    notificationTimer(chatId, "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", false,false,false,false,
                            false,false,true,false,false,false, false);
                    break;
                case "16":
                    setNotificationHour(chatId, 16);
                    notificationTimer(chatId, "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", false,false,false,false,
                            false,false,false,true,false,false, false);
                    break;
                case "17":
                    setNotificationHour(chatId, 17);
                    notificationTimer(chatId, "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", false,false,false,false,
                            false,false,false,false,true,false, false);
                    break;
                case "18":
                    setNotificationHour(chatId, 18);
                    notificationTimer(chatId, "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", false,false,false,false,
                            false,false,false,false,false,true, false);
                    break;
                case "–í–∏–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è‚úÖ":
                    notificationTimer(chatId, "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", false,false,false,false,
                            false,false,false,false,false,false, false);
                    toggleNotifications(chatId);
                    break;
                case "–í–∏–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è":
                    notificationTimer(chatId, "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", false,false,false,false,
                            false,false,false,false,false,false, true);
                    toggleNotifications(chatId);
                    break;
                default:
                    sendMessage(chatId, "–û–π, —â–æ—Å—å –Ω–µ —Ç–∞–∫");
            }
        }
    }

    private void toggleNotifications(long chatId) {
        notificationsEnabled = !notificationsEnabled;

        if (notificationsEnabled) {
            sendMessage(chatId, "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω—É—Ç—ñ.");
            Timer timer = new Timer();
            getInformationAboutCurrency(chatId, "–ö—É—Ä—Å –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç:");
            timer.sendScheduledMessageAtNoon(chatId,"alltext",14,53);
        } else {
            sendMessage(chatId, "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–º–∫–Ω—É—Ç—ñ.");
        }
    }

    private void setNotificationHour(long chatId, int hour) {
        if (hour >= 9 && hour <= 18) {
            notificationHour = hour;
            sendMessage(chatId, "–ì–æ–¥–∏–Ω—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ " + hour + ":00.");
        } else {
            sendMessage(chatId, "–í–∏–±–µ—Ä—ñ—Ç—å –≥–æ–¥–∏–Ω—É –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –≤—ñ–¥ 9 –¥–æ 18.");
        }
    }

    private void startCommandReceived(long chatId, String name) {
        String answer = EmojiParser.parseToUnicode("Hi, " + name + ", nice to meet you!" + "\uD83E\uDEF6\uD83C\uDFFB");
        sendMessage(chatId, answer);
    }

    private void sendMessage(long chatId, String textToSend) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        try {
            execute(message);
        } catch (TelegramApiException ignored) {
        }
    }

    private void startMenu(long chatId, String textToSend) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();
        row.add("–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∞–ª—é—Ç—É");
        keyboardRows.add(row);
        row = new KeyboardRow();
        row.add("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è");
        row.add("–î–æ–ø–æ–º–æ–≥–∞");
        keyboardRows.add(row);
        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException ignored) {
        }
    }
    String alltext;
    protected void getInformationAboutCurrency(long chatId, String textToSend) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));

        Bank bank = new Bank();
        alltext = "";
        String bankC = "";
        String currency = "";

        if (privatBank) {
            bankC = "privat";
        } else if (monoBank) {
            bankC = "mono";
        } else {
            bankC = "nby";
        }

        if (usdChoice) {
            currency = "usd";
        } else if (eurChoice) {
            currency = "eur";
        } else if(usdANDeur) {
            currency = "usdAndEur";
        }

        int decimalPlaces = twoAfterPoint ? 2 : (threeAfterPoint ? 3 : 4);

        if (bankC.equals("nby")) {
            if (usdANDeur) {
                String getValBuyUsd = bank.getRate("usd", bankC, "buy");
                String getValBuyEur = bank.getRate("eur", bankC, "buy");
                String doneInfoBuyUsd = String.format("%." + decimalPlaces + "f", Double.parseDouble(getValBuyUsd));
                String doneInfoBuyEur = String.format("%." + decimalPlaces + "f", Double.parseDouble(getValBuyEur));

                alltext = "\n\n–ö—É–ø—ñ–≤–ª—è USD: " + doneInfoBuyUsd + "\n–ö—É–ø—ñ–≤–ª—è EURO: " + doneInfoBuyEur;
            }else if (usdChoice||eurChoice) {
                String getValBuy = bank.getRate(currency, bankC, "buy");
                String doneInfoBuyUsd = String.format("%." + decimalPlaces + "f", Double.parseDouble(getValBuy));
                alltext = "\n\n–ö—É–ø—ñ–≤–ª—è: " + doneInfoBuyUsd;
            }


        } else {

            if (usdANDeur) {
                String getValSellUsd = bank.getRate("usd", bankC, "sell");
                String doneInfoSellUsd = String.format("%." + decimalPlaces + "f", Double.parseDouble(getValSellUsd));

                String getValBuyUsd = bank.getRate("usd", bankC, "buy");
                String doneInfoBuyUsd = String.format("%." + decimalPlaces + "f", Double.parseDouble(getValBuyUsd));

                //_________Eur________

                String getValSellEur = bank.getRate("eur", bankC, "sell");
                String doneInfoSellEur = String.format("%." + decimalPlaces + "f", Double.parseDouble(getValSellEur));

                String getValBuyEur = bank.getRate("eur", bankC, "buy");
                String doneInfoBuyEur = String.format("%." + decimalPlaces + "f", Double.parseDouble(getValBuyEur));

                alltext = "\n\n–ü—Ä–æ–¥–∞–∂ USD: " + doneInfoSellUsd + "\n–ö—É–ø—ñ–≤–ª—è USD: " + doneInfoBuyUsd
                        + "\n\n–ü—Ä–æ–¥–∞–∂ EURO: " + doneInfoSellEur + "\n–ö—É–ø—ñ–≤–ª—è EURO: " + doneInfoBuyEur;

            } else if (usdChoice||eurChoice) {
                String getValSell = bank.getRate(currency, bankC, "sell");
                String doneInfoSell = String.format("%." + decimalPlaces + "f", Double.parseDouble(getValSell));

                String getValBuy = bank.getRate(currency, bankC, "buy");
                String doneInfoBuy = String.format("%." + decimalPlaces + "f", Double.parseDouble(getValBuy));
                alltext = "\n\n–ü—Ä–æ–¥–∞–∂ : " + doneInfoSell + "\n–ö—É–ø—ñ–≤–ª—è: " + doneInfoBuy;
            }


        }

        sendMessage(chatId, textToSend + alltext);

        try {
            execute(message);
        } catch (TelegramApiException ignored) {
        }
    }

    private void informationMessage(long chatId, String textToSend) {
        String bank = "";
        String currency = "";
        String num = "";

        if (monoBank) {
            bank = "MonoBank";
        } else if (privatBank) {
            bank = "PrivatBank";
        } else
            bank = "NBU";

        if (usdANDeur) {
            currency += "USD —ñ EUR";
        } else if (eurChoice) {
            currency = "EUR";
        } else
            currency = "USD";

        if (twoAfterPoint) {
            num = "2";
        } else if (threeAfterPoint) {
            num = "3";
        } else
            num = "4";

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend + "\n\n–ë–∞–Ω–∫: " + bank + "\n–í–∞–ª—é—Ç–∞: " + currency + "\n–ö-—Å—Ç—å –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏: " + num);

        try {
            execute(message);
        } catch (TelegramApiException ignored) {
        }
    }

    private void settingsMenu(long chatId, String textToSend) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏");
        row.add("–ë–∞–Ω–∫");
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–í–∞–ª—é—Ç–∞");
        row.add("–ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è");
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–ù–∞–∑–∞–¥");
        keyboardRows.add(row);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException ignored) {
        }
    }

    private void sendCurrencySelectionMessage(long chatId, String textToSend, boolean usdSelected, boolean eurSelected, boolean usdAndEuroSelect) {
        usdChoice = usdSelected;
        eurChoice = eurSelected;
        usdANDeur = usdAndEuroSelect;

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add(usdSelected ? "USD‚úÖ" : "USD");
        row.add(eurSelected ? "EUR‚úÖ" : "EUR");
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å");
        keyboardRows.add(row);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException ignored) {
        }
    }

    private void sendBankChoiceMessage(long chatId, String textToSend, boolean monoSelected, boolean privatSelected, boolean nbuSelected) {
        monoBank = monoSelected;
        privatBank = privatSelected;
        nBy = nbuSelected;

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add(monoSelected ? "MonoBank‚úÖ" : "MonoBank");
        row.add(privatSelected ? "PrivatBank‚úÖ" : "PrivatBank");
        row.add(nbuSelected ? "NBU‚úÖ" : "NBU");
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å");
        keyboardRows.add(row);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException ignored) {
        }
    }

    private void sendNumberAfterPoint(long chatId, String textToSend, int numAfterPoint) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        twoAfterPoint = (numAfterPoint == 2);
        threeAfterPoint = (numAfterPoint == 3);
        fourAfterPoint = (numAfterPoint == 4);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("2" + (twoAfterPoint ? "‚úÖ" : ""));
        row.add("3" + (threeAfterPoint ? "‚úÖ" : ""));
        row.add("4" + (fourAfterPoint ? "‚úÖ" : ""));
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å");
        keyboardRows.add(row);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException ignored) {
        }
    }

    private void setNumberAfterPoint(long chatId, String textToSend, int numAfterPoint) {
        twoAfterPoint = false;
        threeAfterPoint = false;
        fourAfterPoint = false;

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("2");
        row.add("3");
        row.add("4");

        switch (numAfterPoint) {
            case 2:
                twoAfterPoint = true;
                row.set(0, "2‚úÖ");
                break;
            case 3:
                threeAfterPoint = true;
                row.set(1, "3‚úÖ");
                break;
            case 4:
                fourAfterPoint = true;
                row.set(2, "4‚úÖ");
                break;
        }

        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å");
        keyboardRows.add(row);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException ignored) {
        }
    }

    private void notificationTimer(long chatId, String textToSend,
                                   boolean nineC, boolean tenC, boolean elevenC, boolean twelveC, boolean thirteenC,
                                   boolean fourteenC, boolean fifteenC, boolean sixteenC, boolean seventeenC, boolean eighteenC, boolean notificationsEnabledC) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);
        notificationsEnabled = notificationsEnabledC;
        nine = nineC;
        ten =tenC;
        eleven = elevenC;
        twelve = twelveC;
        thirteen = thirteenC;
        fourteen = fourteenC;
        fifteen = fifteenC;
        sixteen= sixteenC;
        seventeen = seventeenC;
        eighteen = eighteenC;
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("9" + (nine ? "‚úÖ" : ""));
        row.add("10" +(ten ? "‚úÖ" : ""));
        row.add("11" +(eleven  ? "‚úÖ" : ""));
        row.add("12" +(twelve  ? "‚úÖ" : ""));
        row.add("13" +(thirteen  ? "‚úÖ" : ""));
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("14" +(fourteen  ? "‚úÖ" : ""));
        row.add("15" +(fifteen  ? "‚úÖ" : ""));
        row.add("16" +(sixteen  ? "‚úÖ" : ""));
        row.add("17" +(seventeen  ? "‚úÖ" : ""));
        row.add("18" +(eighteen  ? "‚úÖ" : ""));
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–í–∏–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è" + (notificationsEnabledC ? "‚úÖ" : ""));
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å");
        keyboardRows.add(row);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException ignored) {
        }
    }
}